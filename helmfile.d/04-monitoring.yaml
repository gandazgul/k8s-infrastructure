# Monitoring with Prometheus and Grafana ===============================================
#Part 1: https://sysdig.com/blog/kubernetes-monitoring-prometheus/
#Part 2: https://sysdig.com/blog/kubernetes-monitoring-with-prometheus-alertmanager-grafana-pushgateway-part-2/


# NOTE: cli args take precedence over these
helmDefaults:
  wait: true
  timeout: 600
  recreatePods: true
  force: true

releases:
  - name: prometheus
    namespace: services
#    chart: stable/prometheus
    chart: ../../helm-charts/stable/prometheus
    values:
#      - alertmanager:
#          dnsPolicy: "None"
#          dnsConfig:
#            nameservers:
#              - 8.8.8.8
#              - 8.8.4.4
      - alertmanagerFiles:
          alertmanager.yml:
            global:
              resolve_timeout: 5m
              # The smarthost and SMTP sender used for mail notifications.
              smtp_smarthost: 'smtp.gmail.com:587'
              smtp_hello: 'k8s.sytes.net'
              smtp_from: 'ravelo.carlos@gmail.com'
              smtp_auth_username: 'ravelo.carlos@gmail.com'
              smtp_auth_password: 'ixmcivnavdahhpxj'
            route:
              group_by: ['alertname']
              group_wait: 10s
              group_interval: 10s
              repeat_interval: 1h
              receiver: 'emails'
            receivers:
              - name: 'emails'
                email_configs:
                  - to: 'ravelo.carlos@gmail.com'
              - name: 'webhook-test'
                webhook_configs:
                - url: 'https://webhook.site/c0b2c690-8c1e-4b4d-bded-a2bab92e0f63'
      - serverFiles:
          rules:
            groups:
            - name: example1
              rules:
              - alert: DeadMansSwitch1
                annotations:
                  description: This is a DeadMansSwitch meant to ensure that the entire Alerting pipeline is functional.
                  summary: Alerting DeadMansSwitch
                expr: vector(1)
                labels:
                  severity: none
#          alerts:
      - nodeExporter:
          extraHostPathMounts:
            - name: hostroot
              hostPath: /
              mountPath: /rootfs
              readOnly: true
          extraArgs:
            path.rootfs: /rootfs
      - server:
          ingress:
            enabled: true
            hosts:
              - prometheus.{{ requiredEnv "INGRESS_INTERNAL_NAME" }}
            tls:
              - hosts:
                  - prometheus.{{ requiredEnv "INGRESS_INTERNAL_NAME" }}
                secretName: prometheus-k8s-cert
            annotations:
              kubernetes.io/ingress.class: "nginx"
              certmanager.k8s.io/cluster-issuer: "ca-issuer"

  # Contains the settings, secrets and a dashboard for grafana
  - name: grafana-prometheus
    namespace: services
    chart: ../charts/grafana-prometheus
    values:
      - adminPassword: {{ requiredEnv "ADMIN_PASSWORD" }}
      - smtp:
          user: {{ requiredEnv "MAIL_TO" }}
          password: {{ requiredEnv "SMTP_PASSWORD" }}

  # Check out the README for information on the kubernetes plugin
  - name: grafana
    namespace: services
    chart: stable/grafana
    values:
      - persistence:
          enabled: true
          existingClaim: yasr-volume
          subPath: 'configs/grafana'
      - sidecar:
          datasources:
            enabled: true
            label: grafana_datasource
          dashboards:
            enabled: true
            label: grafana_dashboard
      - smtp:
          existingSecret: grafana
          userKey: smtp-user
          passwordKey: smtp-password
      - admin:
          existingSecret: grafana
      - dnsPolicy: "None"
      - dnsConfig:
          nameservers:
            - 8.8.8.8
            - 8.8.4.4
      - env:
          GF_SERVER_ROOT_URL: https://grafana.{{ requiredEnv "INGRESS_INTERNAL_NAME" }}/
          GF_SMTP_ENABLED: true
          GF_SMTP_HOST: smtp.gmail.com:587
          GF_SMTP_FROM_ADDRESS: {{ env "MAIL_TO" }}
          GF_SMTP_FROM_NAME: {{ env "REPOSITORY_USERNAME" }}
      - ingress:
          enabled: true
          hosts:
            - grafana.{{ requiredEnv "INGRESS_INTERNAL_NAME" }}
          tls:
            - hosts:
                - grafana.{{ requiredEnv "INGRESS_INTERNAL_NAME" }}
              secretName: grafana-k8s-cert
          annotations:
            kubernetes.io/ingress.class: "nginx"
            certmanager.k8s.io/cluster-issuer: "ca-issuer"

#// monitor kubernetes components via services
#kind: Service
#apiVersion: v1
#metadata:
#  name: scheduler-service
#  namespace: kube-system
#spec:
#  selector:
#    component: kube-scheduler
#  ports:
#    - name: scheduler
#      protocol: TCP
#      port: 10251
#      targetPort: 10251

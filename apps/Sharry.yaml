---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sharry
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      chart: sharry
      version: 5.0.1
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
      interval: 5m
  dependsOn:
  - name: yasr-volume
  - name: main-volume
  valuesFrom:
  - kind: Secret
    name: resilio-values
    optional: false
  values:
    env:
      TZ: "${CLUSTER_TIME_ZONE}"
    # -- Sharry configuration. Supports Helm templates.
    # See [application docs](https://eikek.github.io/sharry/doc/configure) for more details.
    # @default -- See values.yaml
    config: |
      sharry.restserver {
        base-url = "https://share.${INGRESS_EXTERNAL_NAME}"
        bind {
          address = "0.0.0.0"
          port = 9090
        }
        backend {
          signup {
            mode = "closed"
          }
          auth {
            # the fixed module is used for bootstrapping, after the DB is created it should be disabled
            fixed {
              enabled = true  # set to true to enable this auth provider
              user = "admin"
              password = "${ADMIN_PASSWORD}"
              order = 10
            }
            # The internal authentication module checks against the internal database.
            internal {
              enabled = true
              order = 50
            }
          }
          jdbc {
            url = "jdbc:h2://config/sharry.db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE"
            user = "sa"
            password = ""
          }
        }
      }
    persistence:
      config:
        enabled: true
        existingClaim: yasr-volume
        subPath: configs/sharry
    ingress:
      main:
        enabled: true
        hosts:
        - host: share.${INGRESS_EXTERNAL_NAME}
          paths:
          - path: /
        tls:
        - hosts:
          - share.${INGRESS_EXTERNAL_NAME}
          secretName: share-cert
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
